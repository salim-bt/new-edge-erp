generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  refresh_expires_in Int?
  not_before_policy  Int?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Designation {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Department {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

enum Gender {
  MALE
  FEMALE
}

model Leave {
  id        Int         @id @default(autoincrement())
  userId    String
  startDate DateTime
  endDate   DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  files     String[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LeaveType {
  CASUAL
  MEDICAL
  MATERNITY
  PATERNITY
  ANNUAL
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Nofications {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  cid           String?       @unique
  emailVerified DateTime?
  image         String?
  dob           DateTime?
  joiningDate   DateTime?
  phoneNo       String?
  gender        Gender?       @default(MALE)
  designationId Int?
  departmentId  Int?
  designation   Designation?  @relation(fields: [designationId], references: [id])
  department    Department?   @relation(fields: [departmentId], references: [id])
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  leaves        Leave[]
  notifications Nofications[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
