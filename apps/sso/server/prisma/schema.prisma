generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @db.VarChar(255)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @db.Timestamp(6)
  deletedAt      DateTime?        @db.Timestamp(6)
  RolePermission RolePermission[]
}

model RefreshToken {
  id        String    @id @default(uuid()) @db.Uuid
  token     String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  userId    String    @db.Uuid
  User      User      @relation(fields: [userId], references: [id])
}

model Role {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @db.VarChar(255)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @db.Timestamp(6)
  deletedAt      DateTime?        @db.Timestamp(6)
  RolePermission RolePermission[]
  UserRole       UserRole[]
}

model RolePermission {
  id           String     @id @default(uuid()) @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?  @db.Timestamp(6)
  roleId       String     @db.Uuid
  permissionId String     @db.Uuid
  Permission   Permission @relation(fields: [permissionId], references: [id])
  Role         Role       @relation(fields: [roleId], references: [id])
}

model User {
  id           String         @id @default(uuid()) @db.Uuid
  email        String         @db.VarChar(255)
  name         String         @db.VarChar(255)
  password     String         @db.VarChar(255)
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?      @db.Timestamp(6)
  RefreshToken RefreshToken[]
  UserRole     UserRole[]
}

model UserRole {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  userId    String    @db.Uuid
  roleId    String    @db.Uuid
  Role      Role      @relation(fields: [roleId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}
